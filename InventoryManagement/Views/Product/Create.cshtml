@model InventoryManagement.Domain.Entities.Product;

@{
    ViewData["Title"] = "Create Product";
}

<h1>Create Product</h1>

<form asp-action="Create">
    <div class="form-group">
        <label asp-for="Name" class="control-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <input asp-for="Description" class="form-control" />
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Price" class="control-label"></label>
        <input type="text" class="form-control" id="priceInput" name="Price"
               value="@Model.Price" autocomplete="off" inputmode="numeric" />

        <span asp-validation-for="Price" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="AmountInStock" class="control-label"></label>
        <input asp-for="AmountInStock" class="form-control" type="number" min="1" />
        <span asp-validation-for="AmountInStock" class="text-danger"></span>
    </div>

    <input type="submit" value="Create" class="btn btn-primary" />
    <a asp-action="Index" class="btn btn-secondary">Back to List</a>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <p>@error.ErrorMessage</p>
            }
        </div>
    }
</form>

<script>
    const priceInput = document.getElementById('priceInput');
    let rawNumbers = '';

    priceInput.addEventListener('keydown', function (e) {
        if (e.key.match(/^\d$/)) {
            rawNumbers += e.key;
            e.preventDefault();
        } else if (e.key === 'Backspace') {
            rawNumbers = rawNumbers.slice(0, -1);
            e.preventDefault();
        } else if (e.ctrlKey || e.metaKey || e.key === 'Tab') {
            return;
        } else {
            e.preventDefault();
        }

        updateInputValue();
    });

    function updateInputValue() {
        let value = rawNumbers.padStart(3, '0');
        let cents = value.slice(-2);
        let reais = value.slice(0, -2);

        reais = reais.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

        priceInput.value = `R$ ${reais},${cents}`;
    }

    window.addEventListener('DOMContentLoaded', () => {
            window.addEventListener('DOMContentLoaded', () => {
        const initial = priceInput.value;

        if (initial) {
            const cleaned = initial.replace(/[^0-9]/g, '');
            rawNumbers = cleaned;
            updateInputValue();
        }
    });

    });
</script>
